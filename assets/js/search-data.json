{
  
    
        "post0": {
            "title": "",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://seanflaherty.com/2020/03/26/2020-02-20-test.html",
            "relUrl": "/2020/03/26/2020-02-20-test.html",
            "date": " • Mar 26, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Demonstration of common equations rendered by MathJAX and a Python implementation",
            "content": "The value at index i of vector X. . X i X = [10, 20, 30] # refx: https://stackoverflow.com/a/36042565 i = 0 print(f&quot;{X[i]}&quot;) # first item of list . 10 . Extend the prior example as 2-D vector X. . X i j X = [[1, 3, 5], [10, 8, 6]] i = 1 j = 0 print(f&quot;{X[i][j]}&quot;) # first item of second list . 10 . Sigma (summation) is for the sum of all elements in a vector for a given range, lower and upper limits inclusive. . &amp;#x2211; i = 1 N X i In Python, we will loop over the vector from the first item (index: 0) to the last item (index: count of items less 1). The value of each item is then aggregated to the result total. . x = [1, 3, 5, 7, 9] result = 0 N = len(x) for i in range(N): result += x[i] print(f&quot;Summation of x: {result}&quot;) ## or do: # result = sum(x) . Summation of x: 25 . Sigma comes again for calculating the average value of all the elements in a vector for a given range. . 1 N &amp;#x2211; i = 1 N x i x = [1, 17, 31, 62, 99] result = 0 N = len(x) for i in range(N): result += x[i] average = result / N print(f&quot;Summation of x: {result}&quot;) print(f&quot;Average of x: {average}&quot;) . Summation of x: 210 Average of x: 42.0 . Pi is for the product of all elements in a vector for a given range. . &amp;#x220F; i = 1 N x i In Python, loop over the vector from the first item to the last item and multiply the values. n.b. Never seen in the context of the 2019/20 Data Science Immersive . x = [1, 3, 5, 7, 9] result = 1 # The action is multiplicative, so do not multiply the first item by zero! N = len(x) for i in range(N): result *= x[i] print(f&quot;Product of x: {result}&quot;) . Product of x: 945 . Pipe means different things depending on how its applied. To fence a number with a single pipe means to returns the absolute value of that number. . x Whereas, to fence a number with a double pipe is to calculate &quot;the norm&quot;, sometimes called the magnitude, of the vector. . x In Python, this means taking each element in a list, summing them, and taking the square root. . import math # for step 2, below x = -10 print(f&quot;Absolute value of x: {abs(x)}&quot;) y = [1, 3, 5, 7, 9] result = 0 N = len(y) for i in range(N): result += y[i] **2 print(f&quot;Norm of y: {math.sqrt(result)}&quot;) . Absolute value of x: 10 Norm of y: 12.84523257866513 . Epsilon finds whether an element is part of a set. . 3 &amp;#x2208; X In Python, this is done by is in. . x = {1, 3, 5} 3 in x . True . Function f where elements of X are mapped to range Y. . f : X &amp;#x2192; Y In Python, this is the general form of a function. . X = [&#39;bird&#39;, &#39;cat&#39;, &#39;dog&#39;] def f(inputs): inputs_len = 0 N = len(inputs) for i in range(N): inputs_len += len(inputs[i]) return inputs_len Y = f(X) print(f&quot;The length of the inputs in X: {Y}&quot;) . The length of the words in X: 10 . Function may come again using symbol R in place of X and Y. R means that the input and output are real numbers and can have any value - int, float, rational, irrational. . f : &amp;#x211D; &amp;#x2192; &amp;#x211D; In Python, this is equivalent to any value execept complex numbers. . import math x = 42 y = math.pi print(f&quot;{x}, {y}&quot;) . 42, 3.141592653589793 . And once more, Rd means a d-dimensional vector of real numbers. . f : &amp;#x211D; d &amp;#x2192; &amp;#x211D; In Python, an example function may take a 2-D input and return the sum product. . import numpy as np X = [1, 3] f = np.sum # This was an interesting example to me, it returns a function for one input Y = f(X) print(f&quot;{Y}&quot;) . 4 . Transpose will exchange the rows and columns. . X T import numpy as np X = [[1, 3, 5], [2, 4, 6]] np.transpose(X) . array([[1, 2], [3, 4], [5, 6]]) . Element-wise multiplication. . Z = X &amp;#x2299; Y In Python, you would multiply the corresponding elements of two lists. . import numpy as np X = [[1, 3], [5, 7]] Y = [[2, 4], [6, 8]] Z = np.multiply(X, Y) print(f&quot;Element-wise product of these two arrays: {Z}&quot;) . Element-wise product of these two arrays: [[ 2 12] [30 56]] . Dot Product gives the sum product of the elements in two sequences of numbers. . X Y X Y X = [1, 3, 5] Y = [2, 4, 6] dot_prd = sum([i*j for i,j in zip(X, Y)]) print(f&quot;Dot product of these two arrays: {dot_prd}&quot;) . Dot product of these two arrays: 44 . Hat is for the unit vector. This means dividing each element in a vector by its length (norm). . x Exclamation is for the factorial of a number. . x ! In Python, you calculate the sum product from the scalar from its range (or just use a built-in function). . X = 5 factor = 1 for i in range(X, 0 , -1): factor = factor * i print(f&quot;Factorial of {X}: {factor}&quot;) ## Or do: # import math # math.factorial(X) . Factorial of 5: 120 . Mu . &amp;#x00B5; Sigma . &amp;#x03C3; Alpha . &amp;#x03C3; Beta . &amp;#x03B2; Theta . &amp;#x0398;",
            "url": "https://seanflaherty.com/jupyter%20notebook/2020/03/26/math-symbols-for-devs.html",
            "relUrl": "/jupyter%20notebook/2020/03/26/math-symbols-for-devs.html",
            "date": " • Mar 26, 2020"
        }
        
    
  
    
  
    
        ,"post3": {
            "title": "Hilary Mason (@hmason) on receiving 24 requests for career advice",
            "content": "I received 24 requests for data science career advice over the holiday break. One theme: junior roles are hard to find and evaluate.Do you work at a company with a career path for data scientists? Would you recommend it for early-career data scientists? . &mdash; Hilary Mason (@hmason) December 27, 2017 .",
            "url": "https://seanflaherty.com/tweets/2017/12/27/hmason-datascience.html",
            "relUrl": "/tweets/2017/12/27/hmason-datascience.html",
            "date": " • Dec 27, 2017"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hello! . My name is Sean Flaherty and I am a full stack Business Intelligence developer from Boston, MA. . As a 20+ year IT professional, I have worked with many clients improving and modernizing their data analytics. Most recently, I have successfully completed the 2019/20 Data Science Immersive from General Assembly and have actively fed my curosity in DevOps. . Get in touch by email. . This website is powered by fastpages 1. . An easy to use blogging platform with extra features for Jupyter Notebooks. &#8617; . |",
          "url": "https://seanflaherty.com/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}